{"ast":null,"code":"import axios from 'axios';\nconst TOKEN_TYPE = localStorage.getItem(\"tokenType\");\nlet ACCESS_TOKEN = localStorage.getItem(\"accessToken\");\nlet REFRESH_TOKEN = localStorage.getItem(\"refreshToken\");\nexport const SystemAdminApi = axios.create({\n  baseURL: 'http://localhost:8080/system/admin',\n  // 백엔드 API 엔드포인트\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `${TOKEN_TYPE} ${ACCESS_TOKEN}`,\n    'REFRESH_TOKEN': REFRESH_TOKEN\n  }\n});\nexport const insertSystemAdmin = async _ref => {\n  let {\n    systemdId,\n    systemAdminId,\n    systemAdminName,\n    systemAdminPassword,\n    userId\n  } = _ref;\n  try {\n    const data = {\n      systemdId,\n      systemAdminId,\n      systemAdminName,\n      systemAdminPassword,\n      userId\n    };\n    const response = await SystemAdminApi.post('/save', data\n    // 다른 헤더도 필요하다면 추가 가능\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error('에러 발생:', error);\n    return []; // 에러 발생 시 빈 배열 반환\n  }\n};","map":{"version":3,"names":["axios","TOKEN_TYPE","localStorage","getItem","ACCESS_TOKEN","REFRESH_TOKEN","SystemAdminApi","create","baseURL","headers","insertSystemAdmin","_ref","systemdId","systemAdminId","systemAdminName","systemAdminPassword","userId","data","response","post","error","console"],"sources":["C:/_server/SPRING_PROJECT/TestProject/src/main/reactfront/src/api/System/SystemAdminApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst TOKEN_TYPE = localStorage.getItem(\"tokenType\");\r\nlet ACCESS_TOKEN = localStorage.getItem(\"accessToken\");\r\nlet REFRESH_TOKEN = localStorage.getItem(\"refreshToken\");\r\n\r\nexport const SystemAdminApi = axios.create({\r\n    baseURL: 'http://localhost:8080/system/admin', // 백엔드 API 엔드포인트\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `${TOKEN_TYPE} ${ACCESS_TOKEN}`,\r\n        'REFRESH_TOKEN': REFRESH_TOKEN,\r\n    },\r\n});\r\n\r\n\r\nexport const insertSystemAdmin =\r\n    async ({ systemdId, systemAdminId, systemAdminName, systemAdminPassword, userId}) => {\r\n        try {\r\n            const data = { systemdId, systemAdminId, systemAdminName, systemAdminPassword, userId\r\n            };\r\n            const response = await SystemAdminApi.post('/save', data\r\n                // 다른 헤더도 필요하다면 추가 가능\r\n            );\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('에러 발생:', error);\r\n            return []; // 에러 발생 시 빈 배열 반환\r\n        }\r\n    };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;AACpD,IAAIC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;AACtD,IAAIE,aAAa,GAAGH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;AAExD,OAAO,MAAMG,cAAc,GAAGN,KAAK,CAACO,MAAM,CAAC;EACvCC,OAAO,EAAE,oCAAoC;EAAE;EAC/CC,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAG,GAAER,UAAW,IAAGG,YAAa,EAAC;IAChD,eAAe,EAAEC;EACrB;AACJ,CAAC,CAAC;AAGF,OAAO,MAAMK,iBAAiB,GAC1B,MAAAC,IAAA,IAAqF;EAAA,IAA9E;IAAEC,SAAS;IAAEC,aAAa;IAAEC,eAAe;IAAEC,mBAAmB;IAAEC;EAAM,CAAC,GAAAL,IAAA;EAC5E,IAAI;IACA,MAAMM,IAAI,GAAG;MAAEL,SAAS;MAAEC,aAAa;MAAEC,eAAe;MAAEC,mBAAmB;MAAEC;IAC/E,CAAC;IACD,MAAME,QAAQ,GAAG,MAAMZ,cAAc,CAACa,IAAI,CAAC,OAAO,EAAEF;IAChD;IACJ,CAAC;;IAED,OAAOC,QAAQ,CAACD,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,EAAE,CAAC,CAAC;EACf;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}