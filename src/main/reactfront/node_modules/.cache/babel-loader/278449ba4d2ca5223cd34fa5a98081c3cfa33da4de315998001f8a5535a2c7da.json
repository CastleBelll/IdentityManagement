{"ast":null,"code":"import axios from \"axios\";\nconst TOKEN_TYPE = localStorage.getItem(\"tokenType\");\nlet ACCESS_TOKEN = localStorage.getItem(\"accessToken\");\nlet REFRESH_TOKEN = localStorage.getItem(\"refreshToken\");\n\n/** CREATE CUSTOM AXIOS INSTANCE */\nexport const UserApi = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `${TOKEN_TYPE} ${ACCESS_TOKEN}`,\n    'REFRESH_TOKEN': REFRESH_TOKEN\n  }\n});\n\n/** SIGNUP API */\nexport const signUp = async _ref => {\n  let {\n    userid,\n    username,\n    userpassword\n  } = _ref;\n  const data = {\n    userid,\n    username,\n    userpassword\n  };\n  const response = await UserApi.post(`/api/v1/user`, data);\n  return response.data;\n};\n/** 회원조회 API */\nexport const fetchUser = async () => {\n  const response = await UserApi.get(`/api/v1/user`);\n  return response.data;\n};\n/** 회원수정 API */\nexport const updateUser = async data => {\n  const response = await UserApi.put(`/api/v1/user`, data);\n  return response.data;\n};\n/** 회원탈퇴 API */\nexport const deleteUser = async () => {\n  await UserApi.delete(`/api/v1/user`);\n};\n// 토큰 갱신\nconst refreshAccessToken = async () => {\n  const response = await UserApi.get(`/api/v1/auth/refresh`);\n  ACCESS_TOKEN = response.data;\n  localStorage.setItem('accessToken', ACCESS_TOKEN);\n  UserApi.defaults.headers.common['Authorization'] = `${TOKEN_TYPE} ${ACCESS_TOKEN}`;\n};\n\n// 토큰 유효성 검사\nUserApi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 403 && !originalRequest._retry) {\n    await refreshAccessToken();\n    return UserApi(originalRequest);\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","TOKEN_TYPE","localStorage","getItem","ACCESS_TOKEN","REFRESH_TOKEN","UserApi","create","baseURL","headers","signUp","_ref","userid","username","userpassword","data","response","post","fetchUser","get","updateUser","put","deleteUser","delete","refreshAccessToken","setItem","defaults","common","interceptors","use","error","originalRequest","config","status","_retry","Promise","reject"],"sources":["C:/_server/SPRING_PROJECT/TestProject/src/main/reactfront/src/api/user/UserAPI.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst TOKEN_TYPE = localStorage.getItem(\"tokenType\");\r\nlet ACCESS_TOKEN = localStorage.getItem(\"accessToken\");\r\nlet REFRESH_TOKEN = localStorage.getItem(\"refreshToken\");\r\n\r\n/** CREATE CUSTOM AXIOS INSTANCE */\r\nexport const UserApi = axios.create({\r\n    baseURL: 'http://localhost:8080',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `${TOKEN_TYPE} ${ACCESS_TOKEN}`,\r\n        'REFRESH_TOKEN': REFRESH_TOKEN,\r\n    },\r\n});\r\n\r\n/** SIGNUP API */\r\nexport const signUp = async ({ userid,username, userpassword }) => {\r\n    const data = {userid, username, userpassword };\r\n    const response = await UserApi.post(`/api/v1/user`, data);\r\n    return response.data;\r\n}\r\n/** 회원조회 API */\r\nexport const fetchUser = async () => {\r\n    const response = await UserApi.get(`/api/v1/user`);\r\n    return response.data;\r\n}\r\n/** 회원수정 API */\r\nexport const updateUser = async (data) => {\r\n    const response = await UserApi.put(`/api/v1/user`, data);\r\n    return response.data;\r\n}\r\n/** 회원탈퇴 API */\r\nexport const deleteUser = async () => {\r\n    await UserApi.delete(`/api/v1/user`);\r\n}\r\n// 토큰 갱신\r\nconst refreshAccessToken = async () => {\r\n    const response = await UserApi.get(`/api/v1/auth/refresh`);\r\n    ACCESS_TOKEN = response.data;\r\n    localStorage.setItem('accessToken', ACCESS_TOKEN);\r\n    UserApi.defaults.headers.common['Authorization'] = `${TOKEN_TYPE} ${ACCESS_TOKEN}`;\r\n}\r\n\r\n// 토큰 유효성 검사\r\nUserApi.interceptors.response.use((response) => {\r\n    return response;\r\n}, async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 403 && !originalRequest._retry) {\r\n        await refreshAccessToken();\r\n        return UserApi(originalRequest);\r\n    }\r\n    return Promise.reject(error);\r\n});"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;AACpD,IAAIC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;AACtD,IAAIE,aAAa,GAAGH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;AAExD;AACA,OAAO,MAAMG,OAAO,GAAGN,KAAK,CAACO,MAAM,CAAC;EAChCC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAG,GAAER,UAAW,IAAGG,YAAa,EAAC;IAChD,eAAe,EAAEC;EACrB;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,MAAM,GAAG,MAAAC,IAAA,IAA6C;EAAA,IAAtC;IAAEC,MAAM;IAACC,QAAQ;IAAEC;EAAa,CAAC,GAAAH,IAAA;EAC1D,MAAMI,IAAI,GAAG;IAACH,MAAM;IAAEC,QAAQ;IAAEC;EAAa,CAAC;EAC9C,MAAME,QAAQ,GAAG,MAAMV,OAAO,CAACW,IAAI,CAAE,cAAa,EAAEF,IAAI,CAAC;EACzD,OAAOC,QAAQ,CAACD,IAAI;AACxB,CAAC;AACD;AACA,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMF,QAAQ,GAAG,MAAMV,OAAO,CAACa,GAAG,CAAE,cAAa,CAAC;EAClD,OAAOH,QAAQ,CAACD,IAAI;AACxB,CAAC;AACD;AACA,OAAO,MAAMK,UAAU,GAAG,MAAOL,IAAI,IAAK;EACtC,MAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACe,GAAG,CAAE,cAAa,EAAEN,IAAI,CAAC;EACxD,OAAOC,QAAQ,CAACD,IAAI;AACxB,CAAC;AACD;AACA,OAAO,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMhB,OAAO,CAACiB,MAAM,CAAE,cAAa,CAAC;AACxC,CAAC;AACD;AACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMR,QAAQ,GAAG,MAAMV,OAAO,CAACa,GAAG,CAAE,sBAAqB,CAAC;EAC1Df,YAAY,GAAGY,QAAQ,CAACD,IAAI;EAC5Bb,YAAY,CAACuB,OAAO,CAAC,aAAa,EAAErB,YAAY,CAAC;EACjDE,OAAO,CAACoB,QAAQ,CAACjB,OAAO,CAACkB,MAAM,CAAC,eAAe,CAAC,GAAI,GAAE1B,UAAW,IAAGG,YAAa,EAAC;AACtF,CAAC;;AAED;AACAE,OAAO,CAACsB,YAAY,CAACZ,QAAQ,CAACa,GAAG,CAAEb,QAAQ,IAAK;EAC5C,OAAOA,QAAQ;AACnB,CAAC,EAAE,MAAOc,KAAK,IAAK;EAChB,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM;EACpC,IAAIF,KAAK,CAACd,QAAQ,CAACiB,MAAM,KAAK,GAAG,IAAI,CAACF,eAAe,CAACG,MAAM,EAAE;IAC1D,MAAMV,kBAAkB,CAAC,CAAC;IAC1B,OAAOlB,OAAO,CAACyB,eAAe,CAAC;EACnC;EACA,OAAOI,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAChC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}